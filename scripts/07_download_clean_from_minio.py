# === Script 07 - T√©l√©chargement des fichiers nettoy√©s depuis MinIO ===
# Ce script t√©l√©charge les fichiers nettoy√©s ('erp_clean.csv', 'web_clean.csv', 'liaison_clean.csv')
# depuis le bucket MinIO sous 'data/outputs/' et les enregistre localement dans 'data/outputs/'.

import os
import sys
import warnings
from pathlib import Path
import boto3
from botocore.exceptions import ClientError
from loguru import logger

# ============================================================================== 
# üîß Initialisation des chemins et logs
# ============================================================================== 
warnings.filterwarnings("ignore")

AIRFLOW_LOG_PATH = os.getenv("AIRFLOW_LOG_PATH", "logs")
LOGS_PATH = Path(AIRFLOW_LOG_PATH)
LOGS_PATH.mkdir(parents=True, exist_ok=True)

LOG_FILE = LOGS_PATH / "download_clean_from_minio.log"
logger.remove()
logger.add(sys.stdout, level="INFO")
logger.add(LOG_FILE, level="INFO", rotation="500 KB")

# ============================================================================== 
# üíº Fonction principale : t√©l√©chargement depuis MinIO
# ============================================================================== 
def main():
    # üåç Configuration MinIO
    MINIO_ENDPOINT = "http://minio:9000"
    ACCESS_KEY = "AKIAIOSFODNN7EXAMPLE"
    SECRET_KEY = "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
    BUCKET_NAME = "bottleneck"
    PREFIX = "data/outputs/"

    # üì• Dossier local de destination
    LOCAL_OUTPUTS_PATH = Path("data/outputs")
    LOCAL_OUTPUTS_PATH.mkdir(parents=True, exist_ok=True)

    files_to_download = ["erp_clean.csv", "web_clean.csv", "liaison_clean.csv"]

    # üîå Connexion MinIO
    try:
        s3_client = boto3.client(
            "s3",
            endpoint_url=MINIO_ENDPOINT,
            aws_access_key_id=ACCESS_KEY,
            aws_secret_access_key=SECRET_KEY,
            region_name="us-east-1"
        )
        logger.success("‚úÖ Connexion √† MinIO √©tablie avec succ√®s.")
    except Exception as e:
        logger.error(f"‚ùå √âchec de connexion √† MinIO : {e}")
        return

    # ‚úÖ V√©rification du bucket
    try:
        s3_client.head_bucket(Bucket=BUCKET_NAME)
        logger.success(f"‚úÖ Bucket '{BUCKET_NAME}' accessible.")
    except ClientError as e:
        logger.error(f"‚ùå Bucket '{BUCKET_NAME}' inaccessible : {e}")
        return

    # üì• T√©l√©chargement des fichiers
    logger.info("üì• D√©but du t√©l√©chargement des fichiers nettoy√©s depuis MinIO...")

    for filename in files_to_download:
        s3_key = f"{PREFIX}{filename}"
        local_file = LOCAL_OUTPUTS_PATH / filename

        try:
            s3_client.download_file(BUCKET_NAME, s3_key, str(local_file))
            logger.success(f"‚úÖ Fichier t√©l√©charg√© : {filename}")
        except ClientError as e:
            logger.error(f"‚ùå Erreur lors du t√©l√©chargement de {filename} : {e}")
            return

    logger.success("üéØ Tous les fichiers nettoy√©s ont √©t√© r√©cup√©r√©s depuis MinIO avec succ√®s dans 'data/outputs/'.")

# ============================================================================== 
# üöÄ Point d'entr√©e
# ============================================================================== 
if __name__ == "__main__":
    main()
