# === Script 11_test - Validation du calcul du chiffre d'affaires ===
# Ce script valide que les tables `ca_par_produit` et `ca_total` sont coh√©rentes
# apr√®s leur cr√©ation et upload. Il v√©rifie : total attendu, absence de NULLs, 
# nombre de lignes et absence de valeurs n√©gatives.

import os
import sys
import duckdb
from pathlib import Path
from loguru import logger
import warnings

warnings.filterwarnings("ignore")

# ==============================================================================
# üîß Configuration des logs
# ==============================================================================
AIRFLOW_LOG_PATH = os.getenv("AIRFLOW_LOG_PATH", "logs")
LOGS_PATH = Path(AIRFLOW_LOG_PATH)
LOGS_PATH.mkdir(parents=True, exist_ok=True)

LOG_FILE = LOGS_PATH / "test_11_validate_ca.log"
logger.remove()
logger.add(sys.stdout, level="INFO")
logger.add(LOG_FILE, level="INFO", rotation="500 KB")

# ==============================================================================
# üß™ Fonction principale
# ==============================================================================
def main():
    try:
        con = duckdb.connect("data/bottleneck.duckdb")
        logger.success("‚úÖ Connexion √† DuckDB √©tablie.")
    except Exception as e:
        logger.error(f"‚ùå √âchec de connexion √† DuckDB : {e}")
        sys.exit(1)

    try:
        # V√©rification CA total
        ca_total = con.execute("SELECT ca_total FROM ca_total").fetchone()[0]
        assert round(ca_total, 2) == 387837.60, f"‚ùå Montant CA incorrect : {ca_total} ‚Ç¨ (attendu : 387‚ÄØ837.60 ‚Ç¨)"
        logger.success(f"üí∞ CA total valid√© : {ca_total:,.2f} ‚Ç¨ ‚úÖ")

        # Nombre de lignes
        nb_produits = con.execute("SELECT COUNT(*) FROM ca_par_produit").fetchone()[0]
        assert nb_produits == 573, f"‚ùå Nombre de lignes incorrect : {nb_produits} (attendu : 573)"
        logger.success(f"üì¶ Nombre de produits : {nb_produits} lignes")

        # V√©rification des nulls
        nulls = con.execute("""
            SELECT COUNT(*) FROM ca_par_produit
            WHERE product_id IS NULL OR post_title IS NULL 
              OR price IS NULL OR stock_quantity IS NULL 
              OR chiffre_affaires IS NULL
        """).fetchone()[0]
        assert nulls == 0, f"‚ùå Valeurs nulles d√©tect√©es : {nulls} lignes"
        logger.success("‚úÖ Aucune valeur nulle d√©tect√©e dans ca_par_produit")

        # V√©rification CA n√©gatif
        negatives = con.execute("""
            SELECT COUNT(*) FROM ca_par_produit WHERE chiffre_affaires < 0
        """).fetchone()[0]
        assert negatives == 0, f"‚ùå CA n√©gatif d√©tect√© : {negatives} lignes"
        logger.success("‚úÖ Aucun CA n√©gatif d√©tect√©")

        logger.success("üéØ Tous les tests de validation du CA sont pass√©s avec succ√®s.")

    except Exception as e:
        logger.error(f"‚ùå Erreur dans les tests de CA : {e}")
        sys.exit(1)

# ==============================================================================
# üöÄ Point d‚Äôentr√©e
# ==============================================================================
if __name__ == "__main__":
    main()
